name: 'Publish Linux Arm builds'
on:
  workflow_dispatch:  # 支持手动触发
  push:
    branches:
      - release       # 推送到release分支时自动触发

jobs:
  build:
    runs-on: ubuntu-22.04  # 基于x64的Ubuntu运行器，通过模拟器构建Arm
    strategy:
      matrix:
        arch: [aarch64, armv7l]  # 支持两种Arm架构
        include:
          - arch: aarch64
            cpu: cortex-a72
            base_image: https://dietpi.com/downloads/images/DietPi_RPi5-ARMv8-Bookworm.img.xz
            deb: arm64
            rpm: aarch64
            appimage: aarch64
          - arch: armv7l
            cpu: cortex-a53
            deb: armhfp
            rpm: arm
            appimage: armhf
            base_image: https://dietpi.com/downloads/images/DietPi_RPi-ARMv7-Bookworm.img.xz

    steps:
      # 步骤1：拉取仓库代码
      - uses: actions/checkout@v4  # 同步升级到v4

      # 步骤2：缓存Rust构建产物（加速后续构建）
      - name: Cache rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      # 步骤3：使用Arm模拟器构建应用
      - name: Build app on Arm runner
        uses: pguyot/arm-runner-action@v2.6.5
        with:
          base_image: ${{ matrix.base_image }}
          cpu: ${{ matrix.cpu }}
          bind_mount_repository: true
          image_additional_mb: 10240
          optimize_image: no
          commands: |
            export HOME=/root
            export CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse
            
            # 安装系统依赖
            apt-get update -y --allow-releaseinfo-change
            apt-get autoremove -y
            apt-get install -y --no-install-recommends \
              curl libwebkit2gtk-4.1-dev build-essential libssl-dev \
              libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev \
              patchelf libfuse2 file
            
            # 安装Rust
            curl https://sh.rustup.rs -sSf | sh -s -- -y
            . "$HOME/.cargo/env"
            
            # 安装Node.js
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash
            apt-get install -y nodejs
            
            # 安装前端依赖（根据实际情况修改）
            npm install
            
            # 构建Tauri应用
            npm run tauri build -- --verbose

      # 步骤4：提取应用版本号
      - name: Get app version
        run: echo "APP_VERSION=$(jq -r .version src-tauri/tauri.conf.json)" >> $GITHUB_ENV

      # 步骤5：上传AppImage产物（已升级到v4版本）
      - name: Upload AppImage bundle
        uses: actions/upload-artifact@v4  # 关键更新：从v3升级到v4
        with:
          name: AppImage-${{ matrix.arch }}
          path: ${{ github.workspace }}/src-tauri/target/release/bundle/appimage/appname_${{ env.APP_VERSION }}_${{ matrix.appimage }}.AppImage
          # v4版本新增的可选配置（提升上传性能）
          compression-level: 6
          overwrite: true
